{"ast":null,"code":"import axios from 'axios';\nimport { USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS, USER_REGISTER_FAIL, USER_LOGIN_REQUEST, USER_LOGIN_SUCCESS, USER_LOGIN_FAIL, USER_LOGOUT, FETCH_USERS_REQUEST, FETCH_USERS_SUCCESS, FETCH_USERS_FAIL, FETCH_USERBILL_REQUEST, FETCH_USERBILL_SUCCESS, FETCH_USERBILL_FAIL } from '../actionTypes'; // Register User\n\nexport const userRegister = (name, email, password) => {\n  return async dispatch => {\n    try {\n      dispatch({\n        type: USER_REGISTER_REQUEST\n      });\n      const config = {\n        headers: {\n          'content-Type': 'application/json'\n        }\n      };\n      const {\n        data\n      } = await axios.post(\"https://inventoryvijainatesh.herokuapp.com/api/user/userregister\", {\n        name,\n        email,\n        password\n      }, config);\n      dispatch({\n        type: USER_REGISTER_SUCCESS,\n        payload: data\n      });\n      localStorage.setItem('userAuthData', JSON.stringify(data));\n    } catch (error) {\n      dispatch({\n        type: USER_REGISTER_FAIL,\n        payload: error.response && error.response.data.message\n      });\n    }\n  };\n};\nexport const loginUser = (email, password) => {\n  return async dispatch => {\n    try {\n      dispatch({\n        type: USER_LOGIN_REQUEST\n      });\n      const config = {\n        headers: {\n          content_Type: \"application/json\"\n        }\n      };\n      const {\n        data\n      } = await axios.post(\"https://inventoryvijainatesh.herokuapp.com/api/user/login\", {\n        email,\n        password\n      }, config);\n      dispatch({\n        type: USER_LOGIN_SUCCESS,\n        payload: data\n      });\n      localStorage.setItem('userAuthData', JSON.stringify(data));\n    } catch (error) {\n      dispatch({\n        type: USER_LOGIN_FAIL,\n        payload: error.response && error.response.data.message\n      });\n    }\n  };\n};\nexport const logoutUser = () => {\n  return async dispatch => {\n    localStorage.removeItem('userAuthData');\n\n    try {\n      dispatch({\n        type: USER_LOGOUT\n      });\n    } catch (error) {}\n  };\n};\nexport const fetchProfile = () => {\n  return async (dispatch, getState) => {\n    const {\n      usersInfo\n    } = getState().user;\n    const id = usersInfo._id;\n\n    try {\n      dispatch({\n        type: FETCH_USERS_REQUEST,\n        loading: true\n      });\n      const config = {\n        headers: {\n          content_Type: 'application/json'\n        }\n      };\n      const {\n        data\n      } = await axios.get(`https://inventoryvijainatesh.herokuapp.com/api/user/profile/${id}`, config);\n      dispatch({\n        type: FETCH_USERS_SUCCESS,\n        payload: data\n      });\n    } catch (error) {\n      dispatch({\n        type: FETCH_USERS_FAIL,\n        error: error.response && error.response.data.message\n      });\n    }\n  };\n};\nexport const fetchUserBill = () => {\n  return async dispatch => {\n    const idInfo = localStorage.getItem('userAuthData');\n    console.log(idInfo);\n    const id = idInfo._id;\n\n    try {\n      dispatch({\n        type: FETCH_USERBILL_REQUEST,\n        loading: true\n      });\n      const config = {\n        headers: {\n          content_Type: 'application/json'\n        }\n      };\n      const {\n        data\n      } = await axios.get(`https://inventoryvijainatesh.herokuapp.com/api/user/bill/${id}`, config);\n      dispatch({\n        type: FETCH_USERBILL_SUCCESS,\n        payload: data\n      });\n    } catch (error) {\n      dispatch({\n        type: FETCH_USERBILL_FAIL,\n        error: error.response && error.response.data.message\n      });\n    }\n  };\n};","map":{"version":3,"sources":["D:/React/InventoryCopy/inventoryfrontend/frontend/src/redux/actions/user/userAction.js"],"names":["axios","USER_REGISTER_REQUEST","USER_REGISTER_SUCCESS","USER_REGISTER_FAIL","USER_LOGIN_REQUEST","USER_LOGIN_SUCCESS","USER_LOGIN_FAIL","USER_LOGOUT","FETCH_USERS_REQUEST","FETCH_USERS_SUCCESS","FETCH_USERS_FAIL","FETCH_USERBILL_REQUEST","FETCH_USERBILL_SUCCESS","FETCH_USERBILL_FAIL","userRegister","name","email","password","dispatch","type","config","headers","data","post","payload","localStorage","setItem","JSON","stringify","error","response","message","loginUser","content_Type","logoutUser","removeItem","fetchProfile","getState","usersInfo","user","id","_id","loading","get","fetchUserBill","idInfo","getItem","console","log"],"mappings":"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","sourcesContent":["import axios from 'axios'\r\nimport {\r\n    USER_REGISTER_REQUEST,\r\n    USER_REGISTER_SUCCESS,\r\n    USER_REGISTER_FAIL,\r\n    USER_LOGIN_REQUEST,\r\n    USER_LOGIN_SUCCESS,\r\n    USER_LOGIN_FAIL,\r\n    USER_LOGOUT,\r\n    FETCH_USERS_REQUEST,\r\n    FETCH_USERS_SUCCESS,\r\n    FETCH_USERS_FAIL,\r\n    FETCH_USERBILL_REQUEST,\r\n    FETCH_USERBILL_SUCCESS,\r\n    FETCH_USERBILL_FAIL\r\n} from '../actionTypes';\r\n\r\n\r\n\r\n// Register User\r\nexport const userRegister = (name, email, password) => {\r\n    return async dispatch => {\r\n        try {\r\n            dispatch({\r\n                type: USER_REGISTER_REQUEST\r\n            })\r\n            const config = {\r\n                headers: { 'content-Type': 'application/json' }\r\n            }\r\n            const { data } = await axios.post(\"https://inventoryvijainatesh.herokuapp.com/api/user/userregister\",\r\n                { name, email, password }, config)\r\n            dispatch({\r\n                type: USER_REGISTER_SUCCESS,\r\n                payload: data\r\n            })\r\n            localStorage.setItem('userAuthData', JSON.stringify(data));\r\n        }\r\n        catch (error) {\r\n            dispatch({\r\n                type: USER_REGISTER_FAIL,\r\n                payload: error.response && error.response.data.message\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport const loginUser = (email, password) => {\r\n    return async dispatch => {\r\n        try {\r\n            dispatch({\r\n                type: USER_LOGIN_REQUEST\r\n            })\r\n            const config = {\r\n                headers: { content_Type: \"application/json\" }\r\n            }\r\n            const { data } = await axios.post(\"https://inventoryvijainatesh.herokuapp.com/api/user/login\",\r\n                { email, password }, config)\r\n            dispatch({\r\n                type: USER_LOGIN_SUCCESS,\r\n                payload: data\r\n            })\r\n            localStorage.setItem('userAuthData', JSON.stringify(data));\r\n        }\r\n        catch (error) {\r\n            dispatch({\r\n                type: USER_LOGIN_FAIL,\r\n                payload: error.response && error.response.data.message\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport const logoutUser = () => {\r\n    return async dispatch => {\r\n        localStorage.removeItem('userAuthData');\r\n        try {\r\n            dispatch({\r\n                type: USER_LOGOUT,\r\n            });\r\n        } catch (error) { }\r\n    };\r\n};\r\n\r\n\r\nexport const fetchProfile = () => {\r\n    return async (dispatch, getState) => {\r\n        const { usersInfo } = getState().user\r\n        const id = usersInfo._id\r\n        try {\r\n            dispatch({\r\n                type: FETCH_USERS_REQUEST,\r\n                loading: true,\r\n            });\r\n            const config = {\r\n                headers: {\r\n                    content_Type: 'application/json'\r\n                }\r\n            };\r\n            const { data } = await axios.get(`https://inventoryvijainatesh.herokuapp.com/api/user/profile/${id}`, config);\r\n            dispatch({\r\n                type: FETCH_USERS_SUCCESS,\r\n                payload: data,\r\n            });\r\n        } catch (error) {\r\n            dispatch({\r\n                type: FETCH_USERS_FAIL,\r\n                error: error.response && error.response.data.message,\r\n            });\r\n        }\r\n    };\r\n};\r\n\r\nexport const fetchUserBill = () => {\r\n    return async (dispatch) => {\r\n        const idInfo = localStorage.getItem('userAuthData')\r\n        console.log(idInfo)\r\n        const id = idInfo._id;\r\n        try {\r\n            dispatch({\r\n                type: FETCH_USERBILL_REQUEST,\r\n                loading: true,\r\n            });\r\n            const config = {\r\n                headers: {\r\n                    content_Type: 'application/json'\r\n                }\r\n            };\r\n            const { data } = await axios.get(`https://inventoryvijainatesh.herokuapp.com/api/user/bill/${id}`, config);\r\n            dispatch({\r\n                type: FETCH_USERBILL_SUCCESS,\r\n                payload: data,\r\n            });\r\n        } catch (error) {\r\n            dispatch({\r\n                type: FETCH_USERBILL_FAIL,\r\n                error: error.response && error.response.data.message,\r\n            });\r\n        }\r\n    };\r\n};\r\n\r\n"]},"metadata":{},"sourceType":"module"}