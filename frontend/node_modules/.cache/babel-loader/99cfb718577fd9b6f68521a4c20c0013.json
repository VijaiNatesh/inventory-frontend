{"ast":null,"code":"import { USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS, USER_REGISTER_FAIL, USER_LOGIN_REQUEST, USER_LOGIN_SUCCESS, USER_LOGIN_FAIL } from \"../actionTypes\";\nimport axios from 'axios';\n\nconst registerUserAction = (name, email, password) => {\n  return async dispatch => {\n    try {\n      dispatch({\n        type: USER_REGISTER_REQUEST\n      });\n      const config = {\n        'Content-Type': 'application/json'\n      };\n      const {\n        data\n      } = await axios.post('/api/users/register', {\n        name,\n        email,\n        password\n      }, config);\n      dispatch({\n        type: USER_REGISTER_SUCCESS,\n        payload: data\n      }); // Save User to LocalStorage\n\n      localStorage.setItem('userAuthData', JSON.stringify(data));\n    } catch (error) {\n      dispatch({\n        type: USER_REGISTER_FAIL,\n        payload: error.response && error.response.data.message\n      });\n    }\n  };\n};\n\nconst LoginUserAction = (email, password) => {\n  return async dispatch => {\n    try {\n      dispatch({\n        type: USER_LOGIN_REQUEST\n      });\n      const config = {\n        \"Content-Type\": \"application/json\"\n      };\n      const {\n        data\n      } = await axios.post('/api/users/login', {\n        email,\n        password\n      }, config);\n      dispatch({\n        type: USER_LOGIN_SUCCESS,\n        payload: data\n      }); // Save User to LocalStorage\n\n      localStorage.setItem('userAuthData', JSON.stringify(data));\n    } catch (error) {\n      dispatch({\n        type: USER_LOGIN_FAIL,\n        payload: error.response && error.response.data.message\n      });\n    }\n  };\n};\n\n_c = LoginUserAction;\nexport { registerUserAction };\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginUserAction\");","map":{"version":3,"sources":["D:/React/Book/frontend/src/redux/actions/users/usersAction.js"],"names":["USER_REGISTER_REQUEST","USER_REGISTER_SUCCESS","USER_REGISTER_FAIL","USER_LOGIN_REQUEST","USER_LOGIN_SUCCESS","USER_LOGIN_FAIL","axios","registerUserAction","name","email","password","dispatch","type","config","data","post","payload","localStorage","setItem","JSON","stringify","error","response","message","LoginUserAction"],"mappings":"AAAA,SAASA,qBAAT,EAAgCC,qBAAhC,EAAuDC,kBAAvD,EAA2EC,kBAA3E,EAA+FC,kBAA/F,EAAmHC,eAAnH,QAA0I,gBAA1I;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAIA,MAAMC,kBAAkB,GAAG,CAACC,IAAD,EAAOC,KAAP,EAAcC,QAAd,KAA2B;AAClD,SAAO,MAAMC,QAAN,IAAkB;AACtB,QAAG;AACFA,MAAAA,QAAQ,CAAC;AACLC,QAAAA,IAAI,EAAEZ;AADD,OAAD,CAAR;AAGA,YAAMa,MAAM,GAAG;AACX,wBAAgB;AADL,OAAf;AAGA,YAAM;AAACC,QAAAA;AAAD,UAAS,MAAMR,KAAK,CAACS,IAAN,CAAW,qBAAX,EACrB;AAACP,QAAAA,IAAD;AAAOC,QAAAA,KAAP;AAAaC,QAAAA;AAAb,OADqB,EAErBG,MAFqB,CAArB;AAGAF,MAAAA,QAAQ,CAAC;AACLC,QAAAA,IAAI,EAAEX,qBADD;AAELe,QAAAA,OAAO,EAAEF;AAFJ,OAAD,CAAR,CAVE,CAeF;;AACAG,MAAAA,YAAY,CAACC,OAAb,CAAqB,cAArB,EAAqCC,IAAI,CAACC,SAAL,CAAeN,IAAf,CAArC;AACA,KAjBD,CAkBA,OAAMO,KAAN,EAAY;AACRV,MAAAA,QAAQ,CAAC;AACLC,QAAAA,IAAI,EAAEV,kBADD;AAELc,QAAAA,OAAO,EAAEK,KAAK,CAACC,QAAN,IAAkBD,KAAK,CAACC,QAAN,CAAeR,IAAf,CAAoBS;AAF1C,OAAD,CAAR;AAIH;AACH,GAzBD;AA0BH,CA3BD;;AA6BA,MAAMC,eAAe,GAAG,CAACf,KAAD,EAAQC,QAAR,KAAqB;AACzC,SAAO,MAAMC,QAAN,IAAkB;AACrB,QAAG;AACCA,MAAAA,QAAQ,CAAC;AACLC,QAAAA,IAAI,EAAET;AADD,OAAD,CAAR;AAGA,YAAMU,MAAM,GAAG;AACX,wBAAgB;AADL,OAAf;AAGA,YAAK;AAACC,QAAAA;AAAD,UAAS,MAAMR,KAAK,CAACS,IAAN,CAAW,kBAAX,EAA+B;AAACN,QAAAA,KAAD;AAAQC,QAAAA;AAAR,OAA/B,EAAkDG,MAAlD,CAApB;AACAF,MAAAA,QAAQ,CAAC;AACLC,QAAAA,IAAI,EAAER,kBADD;AAELY,QAAAA,OAAO,EAAEF;AAFJ,OAAD,CAAR,CARD,CAYE;;AACLG,MAAAA,YAAY,CAACC,OAAb,CAAqB,cAArB,EAAqCC,IAAI,CAACC,SAAL,CAAeN,IAAf,CAArC;AACC,KAdD,CAeA,OAAMO,KAAN,EAAY;AACRV,MAAAA,QAAQ,CAAC;AACLC,QAAAA,IAAI,EAACP,eADA;AAELW,QAAAA,OAAO,EAAEK,KAAK,CAACC,QAAN,IAAkBD,KAAK,CAACC,QAAN,CAAeR,IAAf,CAAoBS;AAF1C,OAAD,CAAR;AAIH;AACJ,GAtBD;AAuBH,CAxBD;;KAAMC,e;AA0BN,SAAQjB,kBAAR","sourcesContent":["import { USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS, USER_REGISTER_FAIL, USER_LOGIN_REQUEST, USER_LOGIN_SUCCESS, USER_LOGIN_FAIL } from \"../actionTypes\";\r\nimport axios from 'axios'\r\n\r\n\r\n\r\nconst registerUserAction = (name, email, password) => {\r\n    return async dispatch => {\r\n       try{\r\n        dispatch({\r\n            type: USER_REGISTER_REQUEST\r\n        })\r\n        const config = {\r\n            'Content-Type': 'application/json'\r\n        }\r\n        const {data} = await axios.post('/api/users/register', \r\n        {name, email,password},\r\n        config)\r\n        dispatch({\r\n            type: USER_REGISTER_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n        // Save User to LocalStorage\r\n        localStorage.setItem('userAuthData', JSON.stringify(data));\r\n       }\r\n       catch(error){\r\n           dispatch({\r\n               type: USER_REGISTER_FAIL,\r\n               payload: error.response && error.response.data.message\r\n           })\r\n       }\r\n    }\r\n}\r\n\r\nconst LoginUserAction = (email, password) => {\r\n    return async dispatch => {\r\n        try{\r\n            dispatch({\r\n                type: USER_LOGIN_REQUEST\r\n            })\r\n            const config = {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n            const{data} = await axios.post('/api/users/login', {email, password}, config)\r\n            dispatch({\r\n                type: USER_LOGIN_SUCCESS,\r\n                payload: data\r\n            })\r\n             // Save User to LocalStorage\r\n        localStorage.setItem('userAuthData', JSON.stringify(data));\r\n        }\r\n        catch(error){\r\n            dispatch({\r\n                type:USER_LOGIN_FAIL,\r\n                payload: error.response && error.response.data.message \r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport {registerUserAction}"]},"metadata":{},"sourceType":"module"}